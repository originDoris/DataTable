/*
 * This file is generated by jOOQ.
 */
package com.datatable.repository.tables.daos;


import com.datatable.framework.plugin.jooq.shared.reactive.AbstractReactiveVertxDAO;
import com.datatable.repository.tables.DtField;
import com.datatable.repository.tables.records.DtFieldRecord;

import io.vertx.core.json.JsonObject;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.reactivex.rxjava3.core.Single;
import java.util.Optional;
import com.datatable.framework.plugin.jooq.rx3.ReactiveRXQueryExecutor;
/**
 * 字段信息
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DtFieldDao extends AbstractReactiveVertxDAO<DtFieldRecord, com.datatable.repository.tables.pojos.DtField, Long, Single<List<com.datatable.repository.tables.pojos.DtField>>, Single<Optional<com.datatable.repository.tables.pojos.DtField>>, Single<Integer>, Single<Long>> implements com.datatable.framework.plugin.jooq.rx3.VertxDAO<DtFieldRecord,com.datatable.repository.tables.pojos.DtField,Long> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public DtFieldDao(Configuration configuration, io.vertx.rxjava3.sqlclient.SqlClient delegate) {
                super(DtField.DT_FIELD, com.datatable.repository.tables.pojos.DtField.class, new ReactiveRXQueryExecutor<DtFieldRecord,com.datatable.repository.tables.pojos.DtField,Long>(configuration,delegate,com.datatable.repository.tables.mappers.RowMappers.getDtFieldMapper()));
        }

        @Override
        protected Long getId(com.datatable.repository.tables.pojos.DtField object) {
                return object.getId();
        }

        /**
     * Find records that have <code>gmt_create IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByGmtCreate(Collection<LocalDateTime> values) {
                return findManyByCondition(DtField.DT_FIELD.GMT_CREATE.in(values));
        }

        /**
     * Find records that have <code>gmt_create IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByGmtCreate(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(DtField.DT_FIELD.GMT_CREATE.in(values),limit);
        }

        /**
     * Find records that have <code>gmt_modified IN (values)</code>
     * asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByGmtModified(Collection<LocalDateTime> values) {
                return findManyByCondition(DtField.DT_FIELD.GMT_MODIFIED.in(values));
        }

        /**
     * Find records that have <code>gmt_modified IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByGmtModified(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(DtField.DT_FIELD.GMT_MODIFIED.in(values),limit);
        }

        /**
     * Find records that have <code>creator IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByCreator(Collection<Long> values) {
                return findManyByCondition(DtField.DT_FIELD.CREATOR.in(values));
        }

        /**
     * Find records that have <code>creator IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByCreator(Collection<Long> values, int limit) {
                return findManyByCondition(DtField.DT_FIELD.CREATOR.in(values),limit);
        }

        /**
     * Find records that have <code>editor IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByEditor(Collection<Long> values) {
                return findManyByCondition(DtField.DT_FIELD.EDITOR.in(values));
        }

        /**
     * Find records that have <code>editor IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByEditor(Collection<Long> values, int limit) {
                return findManyByCondition(DtField.DT_FIELD.EDITOR.in(values),limit);
        }

        /**
     * Find records that have <code>field_name IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByFieldName(Collection<String> values) {
                return findManyByCondition(DtField.DT_FIELD.FIELD_NAME.in(values));
        }

        /**
     * Find records that have <code>field_name IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByFieldName(Collection<String> values, int limit) {
                return findManyByCondition(DtField.DT_FIELD.FIELD_NAME.in(values),limit);
        }

        /**
     * Find records that have <code>field_desc IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByFieldDesc(Collection<String> values) {
                return findManyByCondition(DtField.DT_FIELD.FIELD_DESC.in(values));
        }

        /**
     * Find records that have <code>field_desc IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByFieldDesc(Collection<String> values, int limit) {
                return findManyByCondition(DtField.DT_FIELD.FIELD_DESC.in(values),limit);
        }

        /**
     * Find records that have <code>field_type IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByFieldType(Collection<String> values) {
                return findManyByCondition(DtField.DT_FIELD.FIELD_TYPE.in(values));
        }

        /**
     * Find records that have <code>field_type IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByFieldType(Collection<String> values, int limit) {
                return findManyByCondition(DtField.DT_FIELD.FIELD_TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>field_property IN (values)</code>
     * asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByFieldProperty(Collection<JsonObject> values) {
                return findManyByCondition(DtField.DT_FIELD.FIELD_PROPERTY.in(values));
        }

        /**
     * Find records that have <code>field_property IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByFieldProperty(Collection<JsonObject> values, int limit) {
                return findManyByCondition(DtField.DT_FIELD.FIELD_PROPERTY.in(values),limit);
        }

        /**
     * Find records that have <code>is_delete IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByIsDelete(Collection<Short> values) {
                return findManyByCondition(DtField.DT_FIELD.IS_DELETE.in(values));
        }

        /**
     * Find records that have <code>is_delete IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByIsDelete(Collection<Short> values, int limit) {
                return findManyByCondition(DtField.DT_FIELD.IS_DELETE.in(values),limit);
        }

        /**
     * Find records that have <code>tenant_id IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByTenantId(Collection<Long> values) {
                return findManyByCondition(DtField.DT_FIELD.TENANT_ID.in(values));
        }

        /**
     * Find records that have <code>tenant_id IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByTenantId(Collection<Long> values, int limit) {
                return findManyByCondition(DtField.DT_FIELD.TENANT_ID.in(values),limit);
        }

        /**
     * Find records that have <code>app_id IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByAppId(Collection<Long> values) {
                return findManyByCondition(DtField.DT_FIELD.APP_ID.in(values));
        }

        /**
     * Find records that have <code>app_id IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByAppId(Collection<Long> values, int limit) {
                return findManyByCondition(DtField.DT_FIELD.APP_ID.in(values),limit);
        }

        /**
     * Find records that have <code>template_id IN (values)</code>
     * asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByTemplateId(Collection<Long> values) {
                return findManyByCondition(DtField.DT_FIELD.TEMPLATE_ID.in(values));
        }

        /**
     * Find records that have <code>template_id IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtField>> findManyByTemplateId(Collection<Long> values, int limit) {
                return findManyByCondition(DtField.DT_FIELD.TEMPLATE_ID.in(values),limit);
        }

        @Override
        public ReactiveRXQueryExecutor<DtFieldRecord,com.datatable.repository.tables.pojos.DtField,Long> queryExecutor(){
                return (ReactiveRXQueryExecutor<DtFieldRecord,com.datatable.repository.tables.pojos.DtField,Long>) super.queryExecutor();
        }
}
