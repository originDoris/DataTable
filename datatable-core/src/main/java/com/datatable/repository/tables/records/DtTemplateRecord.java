/*
 * This file is generated by jOOQ.
 */
package com.datatable.repository.tables.records;


import com.datatable.framework.plugin.jooq.generate.VertxPojo;
import com.datatable.repository.tables.DtTemplate;
import com.datatable.repository.tables.interfaces.IDtTemplate;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;


import static com.datatable.framework.plugin.jooq.generate.VertxPojo.*;
/**
 * 模版
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DtTemplateRecord extends UpdatableRecordImpl<DtTemplateRecord> implements VertxPojo, Record10<Long, LocalDateTime, LocalDateTime, Long, Long, String, String, Long, Long, Short>, IDtTemplate {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.dt_template.id</code>.
     */
    @Override
    public DtTemplateRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.dt_template.id</code>.
     */
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.dt_template.gmt_create</code>. 创建时间
     */
    @Override
    public DtTemplateRecord setGmtCreate(LocalDateTime value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.dt_template.gmt_create</code>. 创建时间
     */
    @Override
    public LocalDateTime getGmtCreate() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>public.dt_template.gmt_modified</code>. 修改时间
     */
    @Override
    public DtTemplateRecord setGmtModified(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.dt_template.gmt_modified</code>. 修改时间
     */
    @Override
    public LocalDateTime getGmtModified() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>public.dt_template.creator</code>. 创建人
     */
    @Override
    public DtTemplateRecord setCreator(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.dt_template.creator</code>. 创建人
     */
    @Override
    public Long getCreator() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>public.dt_template.editor</code>. 更新人
     */
    @Override
    public DtTemplateRecord setEditor(Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.dt_template.editor</code>. 更新人
     */
    @Override
    public Long getEditor() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>public.dt_template.template_name</code>.
     */
    @Override
    public DtTemplateRecord setTemplateName(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.dt_template.template_name</code>.
     */
    @Override
    public String getTemplateName() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.dt_template.template_desc</code>. 描述
     */
    @Override
    public DtTemplateRecord setTemplateDesc(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.dt_template.template_desc</code>. 描述
     */
    @Override
    public String getTemplateDesc() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.dt_template.tenant_id</code>.
     */
    @Override
    public DtTemplateRecord setTenantId(Long value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.dt_template.tenant_id</code>.
     */
    @Override
    public Long getTenantId() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>public.dt_template.app_id</code>. 应用id
     */
    @Override
    public DtTemplateRecord setAppId(Long value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.dt_template.app_id</code>. 应用id
     */
    @Override
    public Long getAppId() {
        return (Long) get(8);
    }

    /**
     * Setter for <code>public.dt_template.is_delete</code>. 0 否 1 是
     */
    @Override
    public DtTemplateRecord setIsDelete(Short value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.dt_template.is_delete</code>. 0 否 1 是
     */
    @Override
    public Short getIsDelete() {
        return (Short) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, LocalDateTime, LocalDateTime, Long, Long, String, String, Long, Long, Short> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<Long, LocalDateTime, LocalDateTime, Long, Long, String, String, Long, Long, Short> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return DtTemplate.DT_TEMPLATE.ID;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return DtTemplate.DT_TEMPLATE.GMT_CREATE;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return DtTemplate.DT_TEMPLATE.GMT_MODIFIED;
    }

    @Override
    public Field<Long> field4() {
        return DtTemplate.DT_TEMPLATE.CREATOR;
    }

    @Override
    public Field<Long> field5() {
        return DtTemplate.DT_TEMPLATE.EDITOR;
    }

    @Override
    public Field<String> field6() {
        return DtTemplate.DT_TEMPLATE.TEMPLATE_NAME;
    }

    @Override
    public Field<String> field7() {
        return DtTemplate.DT_TEMPLATE.TEMPLATE_DESC;
    }

    @Override
    public Field<Long> field8() {
        return DtTemplate.DT_TEMPLATE.TENANT_ID;
    }

    @Override
    public Field<Long> field9() {
        return DtTemplate.DT_TEMPLATE.APP_ID;
    }

    @Override
    public Field<Short> field10() {
        return DtTemplate.DT_TEMPLATE.IS_DELETE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public LocalDateTime component2() {
        return getGmtCreate();
    }

    @Override
    public LocalDateTime component3() {
        return getGmtModified();
    }

    @Override
    public Long component4() {
        return getCreator();
    }

    @Override
    public Long component5() {
        return getEditor();
    }

    @Override
    public String component6() {
        return getTemplateName();
    }

    @Override
    public String component7() {
        return getTemplateDesc();
    }

    @Override
    public Long component8() {
        return getTenantId();
    }

    @Override
    public Long component9() {
        return getAppId();
    }

    @Override
    public Short component10() {
        return getIsDelete();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public LocalDateTime value2() {
        return getGmtCreate();
    }

    @Override
    public LocalDateTime value3() {
        return getGmtModified();
    }

    @Override
    public Long value4() {
        return getCreator();
    }

    @Override
    public Long value5() {
        return getEditor();
    }

    @Override
    public String value6() {
        return getTemplateName();
    }

    @Override
    public String value7() {
        return getTemplateDesc();
    }

    @Override
    public Long value8() {
        return getTenantId();
    }

    @Override
    public Long value9() {
        return getAppId();
    }

    @Override
    public Short value10() {
        return getIsDelete();
    }

    @Override
    public DtTemplateRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public DtTemplateRecord value2(LocalDateTime value) {
        setGmtCreate(value);
        return this;
    }

    @Override
    public DtTemplateRecord value3(LocalDateTime value) {
        setGmtModified(value);
        return this;
    }

    @Override
    public DtTemplateRecord value4(Long value) {
        setCreator(value);
        return this;
    }

    @Override
    public DtTemplateRecord value5(Long value) {
        setEditor(value);
        return this;
    }

    @Override
    public DtTemplateRecord value6(String value) {
        setTemplateName(value);
        return this;
    }

    @Override
    public DtTemplateRecord value7(String value) {
        setTemplateDesc(value);
        return this;
    }

    @Override
    public DtTemplateRecord value8(Long value) {
        setTenantId(value);
        return this;
    }

    @Override
    public DtTemplateRecord value9(Long value) {
        setAppId(value);
        return this;
    }

    @Override
    public DtTemplateRecord value10(Short value) {
        setIsDelete(value);
        return this;
    }

    @Override
    public DtTemplateRecord values(Long value1, LocalDateTime value2, LocalDateTime value3, Long value4, Long value5, String value6, String value7, Long value8, Long value9, Short value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDtTemplate from) {
        setId(from.getId());
        setGmtCreate(from.getGmtCreate());
        setGmtModified(from.getGmtModified());
        setCreator(from.getCreator());
        setEditor(from.getEditor());
        setTemplateName(from.getTemplateName());
        setTemplateDesc(from.getTemplateDesc());
        setTenantId(from.getTenantId());
        setAppId(from.getAppId());
        setIsDelete(from.getIsDelete());
    }

    @Override
    public <E extends IDtTemplate> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DtTemplateRecord
     */
    public DtTemplateRecord() {
        super(DtTemplate.DT_TEMPLATE);
    }

    /**
     * Create a detached, initialised DtTemplateRecord
     */
    public DtTemplateRecord(Long id, LocalDateTime gmtCreate, LocalDateTime gmtModified, Long creator, Long editor, String templateName, String templateDesc, Long tenantId, Long appId, Short isDelete) {
        super(DtTemplate.DT_TEMPLATE);

        setId(id);
        setGmtCreate(gmtCreate);
        setGmtModified(gmtModified);
        setCreator(creator);
        setEditor(editor);
        setTemplateName(templateName);
        setTemplateDesc(templateDesc);
        setTenantId(tenantId);
        setAppId(appId);
        setIsDelete(isDelete);
    }

    /**
     * Create a detached, initialised DtTemplateRecord
     */
    public DtTemplateRecord(com.datatable.repository.tables.pojos.DtTemplate value) {
        super(DtTemplate.DT_TEMPLATE);

        if (value != null) {
            setId(value.getId());
            setGmtCreate(value.getGmtCreate());
            setGmtModified(value.getGmtModified());
            setCreator(value.getCreator());
            setEditor(value.getEditor());
            setTemplateName(value.getTemplateName());
            setTemplateDesc(value.getTemplateDesc());
            setTenantId(value.getTenantId());
            setAppId(value.getAppId());
            setIsDelete(value.getIsDelete());
        }
    }

        public DtTemplateRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
