/*
 * This file is generated by jOOQ.
 */
package com.datatable.repository.tables;


import com.datatable.repository.Indexes;
import com.datatable.repository.Keys;
import com.datatable.repository.Public;
import com.datatable.repository.tables.records.DtUserRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 用户信息
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DtUser extends TableImpl<DtUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.dt_user</code>
     */
    public static final DtUser DT_USER = new DtUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DtUserRecord> getRecordType() {
        return DtUserRecord.class;
    }

    /**
     * The column <code>public.dt_user.id</code>.
     */
    public final TableField<DtUserRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.dt_user.gmt_create</code>. 创建时间
     */
    public final TableField<DtUserRecord, Long> GMT_CREATE = createField(DSL.name("gmt_create"), SQLDataType.BIGINT.nullable(false), this, "创建时间");

    /**
     * The column <code>public.dt_user.gmt_modified</code>. 修改时间
     */
    public final TableField<DtUserRecord, Long> GMT_MODIFIED = createField(DSL.name("gmt_modified"), SQLDataType.BIGINT, this, "修改时间");

    /**
     * The column <code>public.dt_user.user_name</code>. 用户名
     */
    public final TableField<DtUserRecord, String> USER_NAME = createField(DSL.name("user_name"), SQLDataType.VARCHAR(50).nullable(false), this, "用户名");

    /**
     * The column <code>public.dt_user.user_account</code>. 账号
     */
    public final TableField<DtUserRecord, String> USER_ACCOUNT = createField(DSL.name("user_account"), SQLDataType.VARCHAR(128).nullable(false), this, "账号");

    /**
     * The column <code>public.dt_user.user_password</code>. 密码
     */
    public final TableField<DtUserRecord, String> USER_PASSWORD = createField(DSL.name("user_password"), SQLDataType.VARCHAR(256).nullable(false), this, "密码");

    /**
     * The column <code>public.dt_user.user_status</code>. 用户状态
     */
    public final TableField<DtUserRecord, String> USER_STATUS = createField(DSL.name("user_status"), SQLDataType.VARCHAR(20).nullable(false), this, "用户状态");

    /**
     * The column <code>public.dt_user.is_delete</code>. 0 否 1 是
     */
    public final TableField<DtUserRecord, Short> IS_DELETE = createField(DSL.name("is_delete"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.SMALLINT)), this, "0 否 1 是");

    /**
     * The column <code>public.dt_user.tenant_id</code>. 租户id
     */
    public final TableField<DtUserRecord, Long> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.BIGINT.nullable(false), this, "租户id");

    /**
     * The column <code>public.dt_user.app_id</code>. 应用id
     */
    public final TableField<DtUserRecord, Long> APP_ID = createField(DSL.name("app_id"), SQLDataType.BIGINT.nullable(false), this, "应用id");

    private DtUser(Name alias, Table<DtUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private DtUser(Name alias, Table<DtUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户信息"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.dt_user</code> table reference
     */
    public DtUser(String alias) {
        this(DSL.name(alias), DT_USER);
    }

    /**
     * Create an aliased <code>public.dt_user</code> table reference
     */
    public DtUser(Name alias) {
        this(alias, DT_USER);
    }

    /**
     * Create a <code>public.dt_user</code> table reference
     */
    public DtUser() {
        this(DSL.name("dt_user"), null);
    }

    public <O extends Record> DtUser(Table<O> child, ForeignKey<O, DtUserRecord> key) {
        super(child, key, DT_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.DT_USER_APP_ID_INDEX, Indexes.DT_USER_TENANT_ID_INDEX, Indexes.DT_USER_USER_STATUS_INDEX);
    }

    @Override
    public UniqueKey<DtUserRecord> getPrimaryKey() {
        return Keys.DT_USER_PK;
    }

    @Override
    public DtUser as(String alias) {
        return new DtUser(DSL.name(alias), this);
    }

    @Override
    public DtUser as(Name alias) {
        return new DtUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DtUser rename(String name) {
        return new DtUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DtUser rename(Name name) {
        return new DtUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, Long, String, String, String, String, Short, Long, Long> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
