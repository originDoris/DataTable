/*
 * This file is generated by jOOQ.
 */
package com.datatable.repository.tables;


import com.datatable.repository.Keys;
import com.datatable.repository.Public;
import com.datatable.repository.tables.records.DtTenantRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 租户
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DtTenant extends TableImpl<DtTenantRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.dt_tenant</code>
     */
    public static final DtTenant DT_TENANT = new DtTenant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DtTenantRecord> getRecordType() {
        return DtTenantRecord.class;
    }

    /**
     * The column <code>public.dt_tenant.id</code>.
     */
    public final TableField<DtTenantRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.dt_tenant.gmt_create</code>. 创建时间
     */
    public final TableField<DtTenantRecord, LocalDateTime> GMT_CREATE = createField(DSL.name("gmt_create"), SQLDataType.LOCALDATETIME(6), this, "创建时间");

    /**
     * The column <code>public.dt_tenant.gmt_modified</code>. 修改时间
     */
    public final TableField<DtTenantRecord, LocalDateTime> GMT_MODIFIED = createField(DSL.name("gmt_modified"), SQLDataType.LOCALDATETIME(6), this, "修改时间");

    /**
     * The column <code>public.dt_tenant.creator</code>. 创建人
     */
    public final TableField<DtTenantRecord, Long> CREATOR = createField(DSL.name("creator"), SQLDataType.BIGINT.nullable(false), this, "创建人");

    /**
     * The column <code>public.dt_tenant.editor</code>. 更新人
     */
    public final TableField<DtTenantRecord, Long> EDITOR = createField(DSL.name("editor"), SQLDataType.BIGINT, this, "更新人");

    /**
     * The column <code>public.dt_tenant.tenant_name</code>. 租户名称
     */
    public final TableField<DtTenantRecord, String> TENANT_NAME = createField(DSL.name("tenant_name"), SQLDataType.VARCHAR(50), this, "租户名称");

    /**
     * The column <code>public.dt_tenant.tenant_desc</code>. 租户描述
     */
    public final TableField<DtTenantRecord, String> TENANT_DESC = createField(DSL.name("tenant_desc"), SQLDataType.VARCHAR(255), this, "租户描述");

    /**
     * The column <code>public.dt_tenant.is_delete</code>. 0 否 1 是
     */
    public final TableField<DtTenantRecord, Short> IS_DELETE = createField(DSL.name("is_delete"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.SMALLINT)), this, "0 否 1 是");

    /**
     * The column <code>public.dt_tenant.tenant_status</code>. 租户状态
     */
    public final TableField<DtTenantRecord, String> TENANT_STATUS = createField(DSL.name("tenant_status"), SQLDataType.VARCHAR(30).nullable(false), this, "租户状态");

    private DtTenant(Name alias, Table<DtTenantRecord> aliased) {
        this(alias, aliased, null);
    }

    private DtTenant(Name alias, Table<DtTenantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("租户"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.dt_tenant</code> table reference
     */
    public DtTenant(String alias) {
        this(DSL.name(alias), DT_TENANT);
    }

    /**
     * Create an aliased <code>public.dt_tenant</code> table reference
     */
    public DtTenant(Name alias) {
        this(alias, DT_TENANT);
    }

    /**
     * Create a <code>public.dt_tenant</code> table reference
     */
    public DtTenant() {
        this(DSL.name("dt_tenant"), null);
    }

    public <O extends Record> DtTenant(Table<O> child, ForeignKey<O, DtTenantRecord> key) {
        super(child, key, DT_TENANT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<DtTenantRecord> getPrimaryKey() {
        return Keys.DT_TENANT_PK;
    }

    @Override
    public DtTenant as(String alias) {
        return new DtTenant(DSL.name(alias), this);
    }

    @Override
    public DtTenant as(Name alias) {
        return new DtTenant(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DtTenant rename(String name) {
        return new DtTenant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DtTenant rename(Name name) {
        return new DtTenant(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, LocalDateTime, LocalDateTime, Long, Long, String, String, Short, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
