/*
 * This file is generated by jOOQ.
 */
package com.datatable.repository.tables.daos;


import com.datatable.framework.plugin.jooq.shared.reactive.AbstractReactiveVertxDAO;
import com.datatable.repository.tables.DtApp;
import com.datatable.repository.tables.records.DtAppRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.reactivex.rxjava3.core.Single;
import java.util.Optional;
import com.datatable.framework.plugin.jooq.rx3.ReactiveRXQueryExecutor;
/**
 * app
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DtAppDao extends AbstractReactiveVertxDAO<DtAppRecord, com.datatable.repository.tables.pojos.DtApp, Long, Single<List<com.datatable.repository.tables.pojos.DtApp>>, Single<Optional<com.datatable.repository.tables.pojos.DtApp>>, Single<Integer>, Single<Long>> implements com.datatable.framework.plugin.jooq.rx3.VertxDAO<DtAppRecord,com.datatable.repository.tables.pojos.DtApp,Long> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public DtAppDao(Configuration configuration, io.vertx.rxjava3.sqlclient.SqlClient delegate) {
                super(DtApp.DT_APP, com.datatable.repository.tables.pojos.DtApp.class, new ReactiveRXQueryExecutor<DtAppRecord,com.datatable.repository.tables.pojos.DtApp,Long>(configuration,delegate,com.datatable.repository.tables.mappers.RowMappers.getDtAppMapper()));
        }

        @Override
        protected Long getId(com.datatable.repository.tables.pojos.DtApp object) {
                return object.getId();
        }

        /**
     * Find records that have <code>gmt_create IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtApp>> findManyByGmtCreate(Collection<LocalDateTime> values) {
                return findManyByCondition(DtApp.DT_APP.GMT_CREATE.in(values));
        }

        /**
     * Find records that have <code>gmt_create IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtApp>> findManyByGmtCreate(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(DtApp.DT_APP.GMT_CREATE.in(values),limit);
        }

        /**
     * Find records that have <code>gmt_modified IN (values)</code>
     * asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtApp>> findManyByGmtModified(Collection<LocalDateTime> values) {
                return findManyByCondition(DtApp.DT_APP.GMT_MODIFIED.in(values));
        }

        /**
     * Find records that have <code>gmt_modified IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtApp>> findManyByGmtModified(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(DtApp.DT_APP.GMT_MODIFIED.in(values),limit);
        }

        /**
     * Find records that have <code>app_name IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtApp>> findManyByAppName(Collection<String> values) {
                return findManyByCondition(DtApp.DT_APP.APP_NAME.in(values));
        }

        /**
     * Find records that have <code>app_name IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtApp>> findManyByAppName(Collection<String> values, int limit) {
                return findManyByCondition(DtApp.DT_APP.APP_NAME.in(values),limit);
        }

        /**
     * Find records that have <code>app_desc IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtApp>> findManyByAppDesc(Collection<String> values) {
                return findManyByCondition(DtApp.DT_APP.APP_DESC.in(values));
        }

        /**
     * Find records that have <code>app_desc IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtApp>> findManyByAppDesc(Collection<String> values, int limit) {
                return findManyByCondition(DtApp.DT_APP.APP_DESC.in(values),limit);
        }

        /**
     * Find records that have <code>creator IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtApp>> findManyByCreator(Collection<Long> values) {
                return findManyByCondition(DtApp.DT_APP.CREATOR.in(values));
        }

        /**
     * Find records that have <code>creator IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtApp>> findManyByCreator(Collection<Long> values, int limit) {
                return findManyByCondition(DtApp.DT_APP.CREATOR.in(values),limit);
        }

        /**
     * Find records that have <code>editor IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtApp>> findManyByEditor(Collection<Long> values) {
                return findManyByCondition(DtApp.DT_APP.EDITOR.in(values));
        }

        /**
     * Find records that have <code>editor IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtApp>> findManyByEditor(Collection<Long> values, int limit) {
                return findManyByCondition(DtApp.DT_APP.EDITOR.in(values),limit);
        }

        /**
     * Find records that have <code>is_delete IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtApp>> findManyByIsDelete(Collection<Short> values) {
                return findManyByCondition(DtApp.DT_APP.IS_DELETE.in(values));
        }

        /**
     * Find records that have <code>is_delete IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtApp>> findManyByIsDelete(Collection<Short> values, int limit) {
                return findManyByCondition(DtApp.DT_APP.IS_DELETE.in(values),limit);
        }

        /**
     * Find records that have <code>tenant_id IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtApp>> findManyByTenantId(Collection<Long> values) {
                return findManyByCondition(DtApp.DT_APP.TENANT_ID.in(values));
        }

        /**
     * Find records that have <code>tenant_id IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtApp>> findManyByTenantId(Collection<Long> values, int limit) {
                return findManyByCondition(DtApp.DT_APP.TENANT_ID.in(values),limit);
        }

        @Override
        public ReactiveRXQueryExecutor<DtAppRecord,com.datatable.repository.tables.pojos.DtApp,Long> queryExecutor(){
                return (ReactiveRXQueryExecutor<DtAppRecord,com.datatable.repository.tables.pojos.DtApp,Long>) super.queryExecutor();
        }
}
