/*
 * This file is generated by jOOQ.
 */
package com.datatable.repository.tables.daos;


import com.datatable.framework.plugin.jooq.shared.reactive.AbstractReactiveVertxDAO;
import com.datatable.repository.tables.DtTemplate;
import com.datatable.repository.tables.records.DtTemplateRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.reactivex.rxjava3.core.Single;
import java.util.Optional;
import com.datatable.framework.plugin.jooq.rx3.ReactiveRXQueryExecutor;
/**
 * 模版
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DtTemplateDao extends AbstractReactiveVertxDAO<DtTemplateRecord, com.datatable.repository.tables.pojos.DtTemplate, Long, Single<List<com.datatable.repository.tables.pojos.DtTemplate>>, Single<Optional<com.datatable.repository.tables.pojos.DtTemplate>>, Single<Integer>, Single<Long>> implements com.datatable.framework.plugin.jooq.rx3.VertxDAO<DtTemplateRecord,com.datatable.repository.tables.pojos.DtTemplate,Long> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public DtTemplateDao(Configuration configuration, io.vertx.rxjava3.sqlclient.SqlClient delegate) {
                super(DtTemplate.DT_TEMPLATE, com.datatable.repository.tables.pojos.DtTemplate.class, new ReactiveRXQueryExecutor<DtTemplateRecord,com.datatable.repository.tables.pojos.DtTemplate,Long>(configuration,delegate,com.datatable.repository.tables.mappers.RowMappers.getDtTemplateMapper()));
        }

        @Override
        protected Long getId(com.datatable.repository.tables.pojos.DtTemplate object) {
                return object.getId();
        }

        /**
     * Find records that have <code>gmt_create IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTemplate>> findManyByGmtCreate(Collection<LocalDateTime> values) {
                return findManyByCondition(DtTemplate.DT_TEMPLATE.GMT_CREATE.in(values));
        }

        /**
     * Find records that have <code>gmt_create IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTemplate>> findManyByGmtCreate(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(DtTemplate.DT_TEMPLATE.GMT_CREATE.in(values),limit);
        }

        /**
     * Find records that have <code>gmt_modified IN (values)</code>
     * asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTemplate>> findManyByGmtModified(Collection<LocalDateTime> values) {
                return findManyByCondition(DtTemplate.DT_TEMPLATE.GMT_MODIFIED.in(values));
        }

        /**
     * Find records that have <code>gmt_modified IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTemplate>> findManyByGmtModified(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(DtTemplate.DT_TEMPLATE.GMT_MODIFIED.in(values),limit);
        }

        /**
     * Find records that have <code>creator IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTemplate>> findManyByCreator(Collection<Long> values) {
                return findManyByCondition(DtTemplate.DT_TEMPLATE.CREATOR.in(values));
        }

        /**
     * Find records that have <code>creator IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTemplate>> findManyByCreator(Collection<Long> values, int limit) {
                return findManyByCondition(DtTemplate.DT_TEMPLATE.CREATOR.in(values),limit);
        }

        /**
     * Find records that have <code>editor IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTemplate>> findManyByEditor(Collection<Long> values) {
                return findManyByCondition(DtTemplate.DT_TEMPLATE.EDITOR.in(values));
        }

        /**
     * Find records that have <code>editor IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTemplate>> findManyByEditor(Collection<Long> values, int limit) {
                return findManyByCondition(DtTemplate.DT_TEMPLATE.EDITOR.in(values),limit);
        }

        /**
     * Find records that have <code>template_name IN (values)</code>
     * asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTemplate>> findManyByTemplateName(Collection<String> values) {
                return findManyByCondition(DtTemplate.DT_TEMPLATE.TEMPLATE_NAME.in(values));
        }

        /**
     * Find records that have <code>template_name IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTemplate>> findManyByTemplateName(Collection<String> values, int limit) {
                return findManyByCondition(DtTemplate.DT_TEMPLATE.TEMPLATE_NAME.in(values),limit);
        }

        /**
     * Find records that have <code>template_desc IN (values)</code>
     * asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTemplate>> findManyByTemplateDesc(Collection<String> values) {
                return findManyByCondition(DtTemplate.DT_TEMPLATE.TEMPLATE_DESC.in(values));
        }

        /**
     * Find records that have <code>template_desc IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTemplate>> findManyByTemplateDesc(Collection<String> values, int limit) {
                return findManyByCondition(DtTemplate.DT_TEMPLATE.TEMPLATE_DESC.in(values),limit);
        }

        /**
     * Find records that have <code>tenant_id IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTemplate>> findManyByTenantId(Collection<Long> values) {
                return findManyByCondition(DtTemplate.DT_TEMPLATE.TENANT_ID.in(values));
        }

        /**
     * Find records that have <code>tenant_id IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTemplate>> findManyByTenantId(Collection<Long> values, int limit) {
                return findManyByCondition(DtTemplate.DT_TEMPLATE.TENANT_ID.in(values),limit);
        }

        /**
     * Find records that have <code>app_id IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTemplate>> findManyByAppId(Collection<Long> values) {
                return findManyByCondition(DtTemplate.DT_TEMPLATE.APP_ID.in(values));
        }

        /**
     * Find records that have <code>app_id IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTemplate>> findManyByAppId(Collection<Long> values, int limit) {
                return findManyByCondition(DtTemplate.DT_TEMPLATE.APP_ID.in(values),limit);
        }

        /**
     * Find records that have <code>is_delete IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTemplate>> findManyByIsDelete(Collection<Short> values) {
                return findManyByCondition(DtTemplate.DT_TEMPLATE.IS_DELETE.in(values));
        }

        /**
     * Find records that have <code>is_delete IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTemplate>> findManyByIsDelete(Collection<Short> values, int limit) {
                return findManyByCondition(DtTemplate.DT_TEMPLATE.IS_DELETE.in(values),limit);
        }

        @Override
        public ReactiveRXQueryExecutor<DtTemplateRecord,com.datatable.repository.tables.pojos.DtTemplate,Long> queryExecutor(){
                return (ReactiveRXQueryExecutor<DtTemplateRecord,com.datatable.repository.tables.pojos.DtTemplate,Long>) super.queryExecutor();
        }
}
