/*
 * This file is generated by jOOQ.
 */
package com.datatable.repository.tables.daos;


import com.datatable.framework.plugin.jooq.shared.reactive.AbstractReactiveVertxDAO;
import com.datatable.repository.tables.DtTenant;
import com.datatable.repository.tables.records.DtTenantRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.reactivex.rxjava3.core.Single;
import java.util.Optional;
import com.datatable.framework.plugin.jooq.rx3.ReactiveRXQueryExecutor;
/**
 * 租户
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DtTenantDao extends AbstractReactiveVertxDAO<DtTenantRecord, com.datatable.repository.tables.pojos.DtTenant, Long, Single<List<com.datatable.repository.tables.pojos.DtTenant>>, Single<Optional<com.datatable.repository.tables.pojos.DtTenant>>, Single<Integer>, Single<Long>> implements com.datatable.framework.plugin.jooq.rx3.VertxDAO<DtTenantRecord,com.datatable.repository.tables.pojos.DtTenant,Long> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public DtTenantDao(Configuration configuration, io.vertx.rxjava3.sqlclient.SqlClient delegate) {
                super(DtTenant.DT_TENANT, com.datatable.repository.tables.pojos.DtTenant.class, new ReactiveRXQueryExecutor<DtTenantRecord,com.datatable.repository.tables.pojos.DtTenant,Long>(configuration,delegate,com.datatable.repository.tables.mappers.RowMappers.getDtTenantMapper()));
        }

        @Override
        protected Long getId(com.datatable.repository.tables.pojos.DtTenant object) {
                return object.getId();
        }

        /**
     * Find records that have <code>gmt_create IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTenant>> findManyByGmtCreate(Collection<LocalDateTime> values) {
                return findManyByCondition(DtTenant.DT_TENANT.GMT_CREATE.in(values));
        }

        /**
     * Find records that have <code>gmt_create IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTenant>> findManyByGmtCreate(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(DtTenant.DT_TENANT.GMT_CREATE.in(values),limit);
        }

        /**
     * Find records that have <code>gmt_modified IN (values)</code>
     * asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTenant>> findManyByGmtModified(Collection<LocalDateTime> values) {
                return findManyByCondition(DtTenant.DT_TENANT.GMT_MODIFIED.in(values));
        }

        /**
     * Find records that have <code>gmt_modified IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTenant>> findManyByGmtModified(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(DtTenant.DT_TENANT.GMT_MODIFIED.in(values),limit);
        }

        /**
     * Find records that have <code>creator IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTenant>> findManyByCreator(Collection<Long> values) {
                return findManyByCondition(DtTenant.DT_TENANT.CREATOR.in(values));
        }

        /**
     * Find records that have <code>creator IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTenant>> findManyByCreator(Collection<Long> values, int limit) {
                return findManyByCondition(DtTenant.DT_TENANT.CREATOR.in(values),limit);
        }

        /**
     * Find records that have <code>editor IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTenant>> findManyByEditor(Collection<Long> values) {
                return findManyByCondition(DtTenant.DT_TENANT.EDITOR.in(values));
        }

        /**
     * Find records that have <code>editor IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTenant>> findManyByEditor(Collection<Long> values, int limit) {
                return findManyByCondition(DtTenant.DT_TENANT.EDITOR.in(values),limit);
        }

        /**
     * Find records that have <code>tenant_name IN (values)</code>
     * asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTenant>> findManyByTenantName(Collection<String> values) {
                return findManyByCondition(DtTenant.DT_TENANT.TENANT_NAME.in(values));
        }

        /**
     * Find records that have <code>tenant_name IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTenant>> findManyByTenantName(Collection<String> values, int limit) {
                return findManyByCondition(DtTenant.DT_TENANT.TENANT_NAME.in(values),limit);
        }

        /**
     * Find records that have <code>tenant_desc IN (values)</code>
     * asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTenant>> findManyByTenantDesc(Collection<String> values) {
                return findManyByCondition(DtTenant.DT_TENANT.TENANT_DESC.in(values));
        }

        /**
     * Find records that have <code>tenant_desc IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTenant>> findManyByTenantDesc(Collection<String> values, int limit) {
                return findManyByCondition(DtTenant.DT_TENANT.TENANT_DESC.in(values),limit);
        }

        /**
     * Find records that have <code>is_delete IN (values)</code> asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTenant>> findManyByIsDelete(Collection<Short> values) {
                return findManyByCondition(DtTenant.DT_TENANT.IS_DELETE.in(values));
        }

        /**
     * Find records that have <code>is_delete IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTenant>> findManyByIsDelete(Collection<Short> values, int limit) {
                return findManyByCondition(DtTenant.DT_TENANT.IS_DELETE.in(values),limit);
        }

        /**
     * Find records that have <code>tenant_status IN (values)</code>
     * asynchronously
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTenant>> findManyByTenantStatus(Collection<String> values) {
                return findManyByCondition(DtTenant.DT_TENANT.TENANT_STATUS.in(values));
        }

        /**
     * Find records that have <code>tenant_status IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Single<List<com.datatable.repository.tables.pojos.DtTenant>> findManyByTenantStatus(Collection<String> values, int limit) {
                return findManyByCondition(DtTenant.DT_TENANT.TENANT_STATUS.in(values),limit);
        }

        @Override
        public ReactiveRXQueryExecutor<DtTenantRecord,com.datatable.repository.tables.pojos.DtTenant,Long> queryExecutor(){
                return (ReactiveRXQueryExecutor<DtTenantRecord,com.datatable.repository.tables.pojos.DtTenant,Long>) super.queryExecutor();
        }
}
