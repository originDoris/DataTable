/*
 * This file is generated by jOOQ.
 */
package com.datatable.repository.tables;


import com.datatable.framework.plugin.jooq.shared.postgres.JSONBToJsonObjectConverter;
import com.datatable.repository.Indexes;
import com.datatable.repository.Keys;
import com.datatable.repository.Public;
import com.datatable.repository.tables.records.DtViewRecord;

import io.vertx.core.json.JsonObject;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 视图
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DtView extends TableImpl<DtViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.dt_view</code>
     */
    public static final DtView DT_VIEW = new DtView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DtViewRecord> getRecordType() {
        return DtViewRecord.class;
    }

    /**
     * The column <code>public.dt_view.id</code>.
     */
    public final TableField<DtViewRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.dt_view.gmt_create</code>. 创建时间
     */
    public final TableField<DtViewRecord, LocalDateTime> GMT_CREATE = createField(DSL.name("gmt_create"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "创建时间");

    /**
     * The column <code>public.dt_view.gmt_modified</code>. 修改日期
     */
    public final TableField<DtViewRecord, LocalDateTime> GMT_MODIFIED = createField(DSL.name("gmt_modified"), SQLDataType.LOCALDATETIME(6), this, "修改日期");

    /**
     * The column <code>public.dt_view.creator</code>. 创建人
     */
    public final TableField<DtViewRecord, Long> CREATOR = createField(DSL.name("creator"), SQLDataType.BIGINT.nullable(false), this, "创建人");

    /**
     * The column <code>public.dt_view.editor</code>. 修改人
     */
    public final TableField<DtViewRecord, Long> EDITOR = createField(DSL.name("editor"), SQLDataType.BIGINT, this, "修改人");

    /**
     * The column <code>public.dt_view.view_name</code>. 视图名称
     */
    public final TableField<DtViewRecord, String> VIEW_NAME = createField(DSL.name("view_name"), SQLDataType.VARCHAR(50).nullable(false), this, "视图名称");

    /**
     * The column <code>public.dt_view.view_desc</code>. 视图描述
     */
    public final TableField<DtViewRecord, String> VIEW_DESC = createField(DSL.name("view_desc"), SQLDataType.VARCHAR(255), this, "视图描述");

    /**
     * The column <code>public.dt_view.view_type</code>. 视图类型
     */
    public final TableField<DtViewRecord, String> VIEW_TYPE = createField(DSL.name("view_type"), SQLDataType.VARCHAR(30), this, "视图类型");

    /**
     * The column <code>public.dt_view.tenant_id</code>. 租户id
     */
    public final TableField<DtViewRecord, Long> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.BIGINT.nullable(false), this, "租户id");

    /**
     * The column <code>public.dt_view.app_id</code>. 应用id
     */
    public final TableField<DtViewRecord, Long> APP_ID = createField(DSL.name("app_id"), SQLDataType.BIGINT.nullable(false), this, "应用id");

    /**
     * The column <code>public.dt_view.is_delete</code>. 0 否 1 是
     */
    public final TableField<DtViewRecord, Short> IS_DELETE = createField(DSL.name("is_delete"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.SMALLINT)), this, "0 否 1 是");

    /**
     * The column <code>public.dt_view.template_id</code>. 模版id
     */
    public final TableField<DtViewRecord, Long> TEMPLATE_ID = createField(DSL.name("template_id"), SQLDataType.BIGINT.nullable(false), this, "模版id");

    /**
     * The column <code>public.dt_view.view_config</code>. 视图配置
     */
    public final TableField<DtViewRecord, JsonObject> VIEW_CONFIG = createField(DSL.name("view_config"), SQLDataType.JSONB, this, "视图配置", new JSONBToJsonObjectConverter());

    private DtView(Name alias, Table<DtViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private DtView(Name alias, Table<DtViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("视图"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.dt_view</code> table reference
     */
    public DtView(String alias) {
        this(DSL.name(alias), DT_VIEW);
    }

    /**
     * Create an aliased <code>public.dt_view</code> table reference
     */
    public DtView(Name alias) {
        this(alias, DT_VIEW);
    }

    /**
     * Create a <code>public.dt_view</code> table reference
     */
    public DtView() {
        this(DSL.name("dt_view"), null);
    }

    public <O extends Record> DtView(Table<O> child, ForeignKey<O, DtViewRecord> key) {
        super(child, key, DT_VIEW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.DT_VIEW_APP_ID_INDEX, Indexes.DT_VIEW_TEMPLATE_ID_INDEX, Indexes.DT_VIEW_TENANT_ID_INDEX);
    }

    @Override
    public UniqueKey<DtViewRecord> getPrimaryKey() {
        return Keys.DT_VIEW_PK;
    }

    @Override
    public DtView as(String alias) {
        return new DtView(DSL.name(alias), this);
    }

    @Override
    public DtView as(Name alias) {
        return new DtView(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DtView rename(String name) {
        return new DtView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DtView rename(Name name) {
        return new DtView(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, LocalDateTime, LocalDateTime, Long, Long, String, String, String, Long, Long, Short, Long, JsonObject> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
